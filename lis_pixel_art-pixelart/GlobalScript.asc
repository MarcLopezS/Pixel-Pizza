// main global script file

// called when the game starts, before the first room is loaded
function game_start() 
{
  InventoryWindow1.ItemWidth = 40;
  InventoryWindow1.ItemHeight = 40;
  Game.SpeechFont= eFontFont4;
  Game.NormalFont= eFontFont4;
  cCharacter.BlinkView = 5;
  cCharacter.BlinkInterval = 10;
  
}

function resetGUI(){
  Button1.NormalGraphic=40;
  Button2.NormalGraphic=42;
  Button3.NormalGraphic=44;
  Button4.NormalGraphic=54;
  Button5.NormalGraphic=38;
  Button7.NormalGraphic=48;
  Button8.NormalGraphic=46;
  Button9.NormalGraphic=50;
  Button10.NormalGraphic=52;
  mouse.Mode= eModeWalkto;
}

// put anything you want to happen every game cycle in here
function repeatedly_execute() 
{
}

// put here anything you want to happen every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{
}

// called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) 
{
  if (IsGamePaused()) keycode = 0; // game paused, so don't react to keypresses
  
  if (keycode == eKeyCtrlQ) QuitGame(1); // Ctrl-Q
  if (keycode == eKeyF9) RestartGame(); // F9
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.pcx");  // F12
  if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to room
}

function ChangeMode(int mode)
{
  resetGUI();
  
  switch(mode)
  {
    case eModeOpen: Button1.NormalGraphic=41;
                      break;
    case eModeClose: Button2.NormalGraphic=43;
                      break;
    case eModePickup: Button3.NormalGraphic=45;
                      break;
    case eModeLookat: Button4.NormalGraphic=55;
                      break;
    case eModeTalkto: Button5.NormalGraphic=39;
                      break;
    case eModePush: Button7.NormalGraphic=49;
                      break;
    case eModeGiveto: Button8.NormalGraphic=47;
                      break;
    case eModePull: Button9.NormalGraphic=51;
                      break;
    case eModeInteract: Button10.NormalGraphic=53;
                      break;
  }
  
  mouse.Mode=mode;
}


function on_mouse_click(MouseButton button) // called when a mouse button is clicked. button is either LEFT or RIGHT
{
  if (IsGamePaused() == 1) // Game is paused, so do nothing (ie. don't allow mouse click)
  {
  }
  else if (button == eMouseLeft) 
  {
    Room.ProcessClick(mouse.x,mouse.y, mouse.Mode);
  }
  else // right-click, so cycle cursor
  {   
    if(mouse.Mode!=eModeWalkto){
          mouse.Mode = eModeWalkto;
          resetGUI();
      }else{
        
        mouse.Mode=eModeLookat;
        ChangeMode(mouse.Mode);        
       }
  }
}


function dialog_request(int param) {
}





function Button5_OnClick(GUIControl *control, MouseButton button)
{
  ChangeMode(eModeTalkto);
}


function Button7_OnClick(GUIControl *control, MouseButton button)
{
  ChangeMode(eModePush);
}


function animationPickUpOrOpen(int loop)
{
    cCharacter.Animate(loop, 5, eOnce, eBlock);
  
}

/*ROOM 2 ACCIONES HORNO PIZZERIA*/

function cHorno_UseInv()
{
   
   switch(player.ActiveInventory){
     case iPizzaOkNoC: 
      cCharacter.Walk(185, 288, eBlock, eWalkableAreas);
      aFuego_horno.Play();
      player.LoseInventory(iPizzaOkNoC);
      cHorno.Animate(1, 10, eOnce, eBlock);
      cHorno.Animate(0, 10, eRepeat, eNoBlock);
      aFuego_horno.Stop();
      player.AddInventory(iPizzaOK);
      iPizzaOK.SetProperty("isUsed",true);
      break;
      
     case iPizzaMalaNoC:
      cCharacter.Walk(185, 288, eBlock, eWalkableAreas);
      aFuego_horno.Play();
      player.LoseInventory(iPizzaMalaNoC);
      cHorno.Animate(1, 10, eOnce, eBlock);
      cHorno.Animate(0, 10, eRepeat, eNoBlock);
      aFuego_horno.Stop();
      player.AddInventory(iPizzaMala);
      iPizzaOK.SetProperty("isUsed",true);
      break;
      
     default: 
      cCharacter.Say("emmmm.... mejor no...");
   }
   
  
}

function iPina_Look()
{
  cCharacter.Say("Lo unico bueno de la pizza con piña, es que nadie te va a robar un trozo");
}



function cHorno_AnyClick()
{
  if(mouse.Mode != eModeLookat){
      cCharacter.Walk(185, 288, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionLeft);
  }
  
  switch(mouse.Mode){
      
      case eModeOpen:
          cCharacter.Say("Ya esta abierto");
          break;
      case eModeClose:
          cCharacter.Say("No se puede cerrar");
          break;
      case eModeGiveto:
          cCharacter.Say("No tiene sentido");
          break;
      case eModePickup:
          cCharacter.Say("Si claro, ahora lo arranco de la pared");
          //falta interaccion de mirar al usuario
          break;
      case eModeLookat:
          cCharacter.Say("Es nuestro viejo horno de piedra");
          cCharacter.Say("Lleva generaciones en esta pizzeria");
          break;
      case eModeTalkto:
          cCharacter.Say("¿Holaaa? ¿Hay alguien ahi? ");
          //falta interaccion de mirar al usuario
          cCharacter.Say("Como alguien me conteste me acojono");
          break;
      case eModePush:
          cCharacter.Say("Emm no gracias");
          break;
      case eModePull:
          cCharacter.Say("Emm no gracias");
          break;
      case eModeInteract:
          cCharacter.Say("Mejor no");
          break;
      case eModeUseinv:
          cHorno_UseInv();
          break;
      default:
          cCharacter.Say("No se puede hacer");
    }
    
    resetGUI();
}

function cRat_AnyClick()
{
    switch(mouse.Mode){
      
      case eModeOpen:
          cCharacter.Say("Mejor no");
          break;
      case eModeClose:
          cCharacter.Say("Mejor no");
          break;
      case eModeGiveto:
          cCharacter.Say("No creo que se dejara");
          break;
      case eModePickup:
          cCharacter.Say("Rádagan no se deja coger, al último que lo intento lo llaman nueve dedos");
          break;
      case eModeLookat:
          cCharacter.Say("El pequeño Rádagan es uno mas de la familia, lleva aqui desde que abrió la pizzeria");
          cCharacter.Say("El jefe se encariñó con él y cualquiera lo echa ahora");
          break;
      case eModeTalkto:
          //Dialogo con la rata
          break;
      case eModePush:
          cCharacter.Say("No quiero empujar a Rádagan, aprecio mi vida");
          break;
      case eModePull:
          cCharacter.Say("No quiero tirar a Rádagan, aprecio mi vida");
          break;
      case eModeInteract:
          //combinaciones con la rata
          break;
      default:
          cCharacter.Say("No se puede hacer");
    }
    resetGUI();
}

function updateInventoryCant(String name, InventoryItem *item, bool sum){
  int con = item.GetProperty("contador");
  if(sum){
    con++;
  } else {
    con--;
  }
  item.SetProperty("contador",con);
  item.Name=String.Format("%i x %s",con, name);
  
}



function Button1_OnClick(GUIControl *control, MouseButton button)
{
  ChangeMode(eModeOpen);
}

function Button2_OnClick(GUIControl *control, MouseButton button)
{
  ChangeMode(eModeClose);
}

function Button3_OnClick(GUIControl *control, MouseButton button)
{
  ChangeMode(eModePickup);
}

function Button4_OnClick(GUIControl *control, MouseButton button)
{
  ChangeMode(eModeLookat);
}

function Button8_OnClick(GUIControl *control, MouseButton button)
{
  ChangeMode(eModeGiveto);
}

function Button9_OnClick(GUIControl *control, MouseButton button)
{
  ChangeMode(eModePull);
}

function Button10_OnClick(GUIControl *control, MouseButton button)
{
  ChangeMode(eModeInteract);
}

//combinar pizza OK con caja vacia
function iCajaPizzaVacia_UseInv()
{
  
  if(player.ActiveInventory == iPizzaOK){
      
      player.LoseInventory(iPizzaOK);
      player.LoseInventory(iCajaPizzaVacia);
      player.AddInventory(iCajaPizza);      
    }
  
}

function cRat_UseInv()
{
  if(player.ActiveInventory==iQueso || player.ActiveInventory==iTofu){
    
    cCharacter.Say("Rádagan va demasiado rápido, mejor se lo dejaré en su agujero");
    }
}

function loseAllInventory(){
  
    int i = 1;
      while (i < (Game.InventoryItemCount + 1)){ 
          if (player.InventoryQuantity[i] != 0){   
              player.LoseInventory(inventory[ i ]);
            } 
          i++;
      }
  
}


function iPizzaOK_UseInv()
{
    if(player.ActiveInventory==iCajaPizzaVacia){
      
        player.LoseInventory(iPizzaOK);
        player.LoseInventory(iCajaPizzaVacia);
        player.AddInventory(iCajaPizza);
      
      }
}
